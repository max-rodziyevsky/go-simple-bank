// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.16.0
// source: entries.sql

package entry

import (
	"context"
)

const createEntry = `-- name: CreateEntry :one
insert into entries(
    account_id, amount
) values ($1, $2)
returning id, account_id, amount, created_at
`

type CreateEntryParams struct {
	AccountID int64 `db:"account_id" json:"account_id"`
	Amount    int64 `db:"amount" json:"amount"`
}

func (q *Queries) CreateEntry(ctx context.Context, arg CreateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, createEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEntry = `-- name: DeleteEntry :exec
delete from entries
where account_id = $1
`

func (q *Queries) DeleteEntry(ctx context.Context, accountID int64) error {
	_, err := q.db.ExecContext(ctx, deleteEntry, accountID)
	return err
}

const getEntryByAccountID = `-- name: GetEntryByAccountID :one
select id, account_id, amount, created_at from entries
where account_id = $1
limit 1
`

func (q *Queries) GetEntryByAccountID(ctx context.Context, accountID int64) (Entry, error) {
	row := q.db.QueryRowContext(ctx, getEntryByAccountID, accountID)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}

const listEntries = `-- name: ListEntries :many
select id, account_id, amount, created_at from entries
order by id
limit $1
offset $2
`

type ListEntriesParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListEntries(ctx context.Context, arg ListEntriesParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntries, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEntriesByAccountID = `-- name: ListEntriesByAccountID :many
select id, account_id, amount, created_at from entries
where account_id = $1
limit $2
offset $3
`

type ListEntriesByAccountIDParams struct {
	AccountID int64 `db:"account_id" json:"account_id"`
	Limit     int32 `db:"limit" json:"limit"`
	Offset    int32 `db:"offset" json:"offset"`
}

func (q *Queries) ListEntriesByAccountID(ctx context.Context, arg ListEntriesByAccountIDParams) ([]Entry, error) {
	rows, err := q.db.QueryContext(ctx, listEntriesByAccountID, arg.AccountID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Entry
	for rows.Next() {
		var i Entry
		if err := rows.Scan(
			&i.ID,
			&i.AccountID,
			&i.Amount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEntry = `-- name: UpdateEntry :one
update entries
set amount = $2
where account_id = $1
returning id, account_id, amount, created_at
`

type UpdateEntryParams struct {
	AccountID int64 `db:"account_id" json:"account_id"`
	Amount    int64 `db:"amount" json:"amount"`
}

func (q *Queries) UpdateEntry(ctx context.Context, arg UpdateEntryParams) (Entry, error) {
	row := q.db.QueryRowContext(ctx, updateEntry, arg.AccountID, arg.Amount)
	var i Entry
	err := row.Scan(
		&i.ID,
		&i.AccountID,
		&i.Amount,
		&i.CreatedAt,
	)
	return i, err
}
